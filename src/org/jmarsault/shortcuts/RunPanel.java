package org.jmarsault.shortcuts;

import java.io.File;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.SwingUtilities;
import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.JTextComponent;
import javax.swing.text.PlainDocument;
import org.openide.DialogDisplayer;
import org.openide.NotifyDescriptor;
import org.openide.filesystems.FileUtil;
import org.openide.util.Exceptions;
import org.openide.util.NbBundle;

public class RunPanel extends javax.swing.JPanel {

    private final ShortcutSettings settings;
    private final Object[] previousCommands;

    public RunPanel() {
        settings = ShortcutSettings.getDefault();
        previousCommands = settings.getCommands().toArray();
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cbCommand = new javax.swing.JComboBox();
        final JTextComponent editor = (JTextComponent) cbCommand.getEditor().getEditorComponent();
        editor.setDocument(new AutocompleteDoc(cbCommand));
        SwingUtilities.invokeLater(new Runnable() {

            public void run() {
                editor.selectAll();
                cbCommand.requestFocus();
            }
        });
        btnBrowse = new javax.swing.JButton();

        cbCommand.setEditable(true);
        cbCommand.setModel(new javax.swing.DefaultComboBoxModel(previousCommands));

        btnBrowse.setText(org.openide.util.NbBundle.getMessage(RunPanel.class, "RunPanel.btnBrowse.text")); // NOI18N
        btnBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBrowseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cbCommand, 0, 310, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnBrowse, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbCommand, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBrowse))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    protected void executeActionPerformed() {
        String newCommand = (String) cbCommand.getEditor().getItem();
        if (newCommand != null) {
            settings.addCommand(newCommand);
            String name = newCommand.split(" ")[0];
            CommandUtils.exec(name, newCommand);
        }
    }

    protected void saveActionPerformed() {
        String newCommand = (String) cbCommand.getEditor().getItem();
        NotifyDescriptor.InputLine msg = new NotifyDescriptor.InputLine(NbBundle.getMessage(RunPanel.class, "lbl_commandName"), NbBundle.getMessage(RunPanel.class, "lbl_commandName"));
        Object resp = DialogDisplayer.getDefault().notify(msg);
        if (resp == NotifyDescriptor.OK_OPTION) {
            String name = msg.getInputText();
            settings.addShortcut(name, newCommand);
        }
    }

    private void btnBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBrowseActionPerformed
        JFileChooser chooser = new JFileChooser(CommandUtils.getFirstApplicationFile((String) cbCommand.getEditor().getItem()));
        chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        int r = chooser.showDialog(
                SwingUtilities.getWindowAncestor(this),
                NbBundle.getMessage(RunPanel.class, "lbl_select"));
        if (r == JFileChooser.APPROVE_OPTION) {
            File file = chooser.getSelectedFile();

            file = FileUtil.normalizeFile(file);

            String cmd = file.getAbsoluteFile().toString();
            if (cmd.matches(".*\\s.*")) {
                cmd = "\"" + cmd + "\"";
            }

            JTextComponent editor = (JTextComponent) cbCommand.getEditor().getEditorComponent();
            AutocompleteDoc doc = (AutocompleteDoc) editor.getDocument();
            try {
                doc.insertString(cmd);
            } catch (BadLocationException ex) {
                Exceptions.printStackTrace(ex);
            }


        }
    }//GEN-LAST:event_btnBrowseActionPerformed

    public class AutocompleteDoc extends PlainDocument {

        private JComboBox comboBox;
        private boolean selecting = false;

        public AutocompleteDoc(final JComboBox comboBox) {
            this.comboBox = comboBox;
        }

        @Override
        public void remove(int offs, int len) throws BadLocationException {
            if (!selecting) {
                super.remove(offs, len);
            }
        }

        public void insertString(String str) throws BadLocationException {
            super.remove(0, getLength());
            super.insertString(0, str, null);
        }

        @Override
        public void insertString(int offs, String str, AttributeSet a) throws BadLocationException {

            if (!selecting) {

                super.insertString(offs, str, a);

                Object item = lookupItem(getText(0, getLength()));
                setSelectedItem(item);

                if (item != null) {
                    super.remove(0, getLength());
                    super.insertString(0, item.toString(), a);
                }


                JTextComponent editor = (JTextComponent) comboBox.getEditor().getEditorComponent();
                editor.setSelectionStart(offs + str.length());
                editor.setSelectionEnd(getLength());

            }
        }

        private void setSelectedItem(Object item) {
            selecting = true;
            comboBox.getModel().setSelectedItem(item);
            selecting = false;
        }

        private Object lookupItem(String pattern) {
            for (int i = 0, n = comboBox.getModel().getSize(); i < n; i++) {
                Object currentItem = comboBox.getModel().getElementAt(i);
                if (currentItem.toString().startsWith(pattern)) {
                    setSelectedItem(currentItem);
                    if (comboBox.isDisplayable()) {
                        comboBox.setPopupVisible(true);
                    }
                    return currentItem;
                }

            }
            if (comboBox.isDisplayable()) {
                comboBox.setPopupVisible(false);
            }
            return null;
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBrowse;
    private javax.swing.JComboBox cbCommand;
    // End of variables declaration//GEN-END:variables
}
